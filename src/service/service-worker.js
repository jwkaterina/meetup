/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

import { formatDate } from '../helper';

clientsClaim();
self.skipWaiting();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL('/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

/*
Here is the list of all possible push payloads:

{
  "type":"WEB_PUSH_SUBSCRIBED"
}

{
  "type":"MEETUP_UPDATE",
  "oldMeetup": {
    "item": {
      "pk":"weekstart_2023-01-30",
      "sk":"event_01GR8BBQR0S9BS4QFMWPN4G3T3"
    },
    "date":"2023-02-02",
    "start":"06:00",
    "end":"09:00"
  },
  "newMeetup": {
    "item": {
      "pk":"weekstart_2023-01-30",
      "sk":"event_01GR8BBQR0S9BS4QFMWPN4G3T3"
    },
    "date":"2023-02-02",
    "start":"10:00",
    "end":"12:00"
  },
  "changes": {
    "start": {
      "oldValue":"06:00",
      "newValue":"10:00"
    },
    "end": {
      "oldValue":"09:00",
      "newValue":"12:00"
    }
  }
}

{
  "type":"MEETUP_DELETE",
  "oldMeetup": {
    "item": {
      "pk":"weekstart_2023-01-30",
      "sk":"event_01GRBS7BR0YVXJDNBBHCX6SHXF"
    },
    "date":"2023-02-03",
    "start":"14:00",
    "end":"15:00"
  },
  "newMeetup":null,
  "changes":null
}

*/

self.addEventListener('push', function(event) {
  console.log('[Service Worker] Push Received.');
  console.log(`[Service Worker] Push had this data: "${event.data.text()}"`);

  let message = '';
  let title = ''

  const payload = event.data.json();

  if(payload.type == 'WEB_PUSH_SUBSCRIBED') {
    title = 'Meetup';
    message = 'Tu a été abonné aux notifications push';
  }

  const formattedDate = formatDate(payload.newMeetup.date);

  if(payload.type == 'MEETUP_UPDATE') {
    title = 'Le groupe a était modifié';
    message = `Date\t: ${formattedDate}\nAvant\t: de ${payload.oldMeetup.start} à ${payload.oldMeetup.end}\nPrésent\t: de ${payload.newMeetup.start} à ${payload.newMeetup.end}`;
  }

  if(payload.type == 'MEETUP_DELETE') {
    title = 'Le groupe a été annulée';
    message = `Date: ${formattedDate}\nDe ${payload.oldMeetup.start} à ${payload.oldMeetup.end}`;
  }

  if(!message || !title) {
    return;
  }

  const options = {
    body: message,
    icon: 'icons/favicon.ico',
  };

  const registration = self.registration;
  const promise = registration.showNotification(title, options);
  event.waitUntil(promise);
});

const origin = self.location.origin;

self.addEventListener('notificationclick', function(event) {
  console.log('[Service Worker] Notification click received.');

  event.notification.close();

  event.waitUntil(
    clients.openWindow(origin)
  );
});
